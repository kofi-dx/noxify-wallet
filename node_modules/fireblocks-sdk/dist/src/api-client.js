"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiClient = void 0;
const os_1 = __importDefault(require("os"));
const platform_1 = __importDefault(require("platform"));
const axios_1 = __importDefault(require("axios"));
const query_string_1 = __importDefault(require("query-string"));
const package_json_1 = require("../package.json");
class ApiClient {
    constructor(authProvider, apiBaseUrl, options) {
        var _a, _b, _c, _d, _e, _f, _g;
        this.authProvider = authProvider;
        this.apiBaseUrl = apiBaseUrl;
        this.options = options;
        this.axiosInstance = axios_1.default.create({
            baseURL: this.apiBaseUrl,
            proxy: (_a = this.options) === null || _a === void 0 ? void 0 : _a.proxy,
            timeout: (_b = this.options) === null || _b === void 0 ? void 0 : _b.timeoutInMs,
            httpsAgent: (_c = this.options) === null || _c === void 0 ? void 0 : _c.httpsAgent,
            headers: {
                "X-API-Key": this.authProvider.getApiKey(),
                "User-Agent": this.getUserAgent()
            },
        });
        if ((_e = (_d = options === null || options === void 0 ? void 0 : options.customAxiosOptions) === null || _d === void 0 ? void 0 : _d.interceptors) === null || _e === void 0 ? void 0 : _e.request) {
            this.axiosInstance.interceptors.request.use(options.customAxiosOptions.interceptors.request.onFulfilled, options.customAxiosOptions.interceptors.request.onRejected);
        }
        if ((_g = (_f = options === null || options === void 0 ? void 0 : options.customAxiosOptions) === null || _f === void 0 ? void 0 : _f.interceptors) === null || _g === void 0 ? void 0 : _g.response) {
            this.axiosInstance.interceptors.response.use(options.customAxiosOptions.interceptors.response.onFulfilled, options.customAxiosOptions.interceptors.response.onRejected);
        }
    }
    getUserAgent() {
        var _a, _b;
        let userAgent = `fireblocks-sdk-js/${package_json_1.version}`;
        if (!((_a = this.options) === null || _a === void 0 ? void 0 : _a.anonymousPlatform)) {
            userAgent += ` (${os_1.default.type()} ${os_1.default.release()}; ${platform_1.default.name} ${platform_1.default.version}; ${os_1.default.arch()})`;
        }
        if ((_b = this.options) === null || _b === void 0 ? void 0 : _b.userAgent) {
            userAgent = `${this.options.userAgent} ${userAgent}`;
        }
        return userAgent;
    }
    issueGetRequestForTransactionPages(rawPath) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = normalizePath(rawPath);
            const token = this.authProvider.signJwt(path);
            const res = yield this.axiosInstance.get(path, {
                headers: { "Authorization": `Bearer ${token}` }
            });
            return {
                transactions: res.data,
                pageDetails: {
                    prevPage: res.headers["prev-page"] ? res.headers["prev-page"].toString() : "",
                    nextPage: res.headers["next-page"] ? res.headers["next-page"].toString() : "",
                }
            };
        });
    }
    issueGetRequest(rawPath, queryStringParams, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const pathWithParams = queryStringParams ? `${rawPath}?${query_string_1.default.stringify(queryStringParams)}` : rawPath;
            const path = normalizePath(pathWithParams);
            const token = this.authProvider.signJwt(path);
            const headers = { "Authorization": `Bearer ${token}` };
            this.addNcwHeaderIfNeeded(headers, requestOptions);
            const res = yield this.axiosInstance.get(path, { headers });
            return res.data;
        });
    }
    issuePostRequest(rawPath, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = normalizePath(rawPath);
            const token = this.authProvider.signJwt(path, body);
            const headers = { "Authorization": `Bearer ${token}` };
            const idempotencyKey = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.idempotencyKey;
            if (idempotencyKey) {
                headers["Idempotency-Key"] = idempotencyKey;
            }
            this.addNcwHeaderIfNeeded(headers, requestOptions);
            const response = yield this.axiosInstance.post(path, body, { headers });
            return response.data;
        });
    }
    issuePutRequest(rawPath, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = normalizePath(rawPath);
            const token = this.authProvider.signJwt(path, body);
            const headers = { "Authorization": `Bearer ${token}` };
            this.addNcwHeaderIfNeeded(headers, requestOptions);
            const res = (yield this.axiosInstance.put(path, body, { headers }));
            return res.data;
        });
    }
    issuePatchRequest(rawPath, body, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = normalizePath(rawPath);
            const token = this.authProvider.signJwt(path, body);
            const headers = { "Authorization": `Bearer ${token}` };
            this.addNcwHeaderIfNeeded(headers, requestOptions);
            const res = (yield this.axiosInstance.patch(path, body, { headers }));
            return res.data;
        });
    }
    issueDeleteRequest(rawPath, requestOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const path = normalizePath(rawPath);
            const token = this.authProvider.signJwt(path);
            const headers = { "Authorization": `Bearer ${token}` };
            this.addNcwHeaderIfNeeded(headers, requestOptions);
            const res = (yield this.axiosInstance.delete(path, { headers }));
            return res.data;
        });
    }
    addNcwHeaderIfNeeded(headers, requestOptions) {
        var _a;
        if ((_a = requestOptions === null || requestOptions === void 0 ? void 0 : requestOptions.ncw) === null || _a === void 0 ? void 0 : _a.walletId) {
            headers["X-End-User-Wallet-Id"] = requestOptions.ncw.walletId;
        }
    }
}
exports.ApiClient = ApiClient;
/**
 * This function allows backward compatibility with previous version of axios that did not omit "?" for
 * urls with no params. This function will make sure we are omitting the "?" before signing it
 */
function normalizePath(path) {
    return path.replace(/\?$/, "");
}
//# sourceMappingURL=api-client.js.map