import { ChainInfo, CheckTermsOfServiceResponseDto, ClaimRewardsRequestDto, ClaimRewardsResponse, DelegationSummaryDto, DelegationSummaryDtoByVault, SplitRequestDto, SplitResponse, StakeRequestDto, StakeResponse, StakingChain, StakingPosition, StakingProvider, UnstakeRequestDto, UnstakeResponse, WithdrawRequestDto, WithdrawResponse } from "./types";
import { StakingSDK } from "./staking-sdk";
import { ApiClient } from "../api-client";
export declare class StakingApiClient implements StakingSDK {
    private readonly apiClient;
    constructor(apiClient: ApiClient);
    getChains(): Promise<string[]>;
    getChainInfo(chainDescriptor: StakingChain): Promise<ChainInfo>;
    getPositionsSummary(): Promise<DelegationSummaryDto>;
    getPositionsSummaryByVault(): Promise<DelegationSummaryDtoByVault>;
    stake(chainDescriptor: StakingChain, body: StakeRequestDto): Promise<StakeResponse>;
    unstake(chainDescriptor: StakingChain, body: UnstakeRequestDto): Promise<UnstakeResponse>;
    withdraw(chainDescriptor: StakingChain, body: WithdrawRequestDto): Promise<WithdrawResponse>;
    claimRewards(chainDescriptor: StakingChain, body: ClaimRewardsRequestDto): Promise<ClaimRewardsResponse>;
    split(chainDescriptor: StakingChain, body: SplitRequestDto): Promise<SplitResponse>;
    getPositions(chainDescriptor?: StakingChain): Promise<StakingPosition[]>;
    getPosition(positionId: string): Promise<StakingPosition>;
    getProviders(): Promise<StakingProvider[]>;
    approveProviderTermsOfService(providerId: string): Promise<CheckTermsOfServiceResponseDto>;
}
