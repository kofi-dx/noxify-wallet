"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StakingApiClient = void 0;
const STAKING_BASE_PATH = "/v1/staking";
class StakingApiClient {
    constructor(apiClient) {
        this.apiClient = apiClient;
    }
    getChains() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/chains`);
        });
    }
    getChainInfo(chainDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/chainInfo`);
        });
    }
    getPositionsSummary() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/positions/summary`);
        });
    }
    getPositionsSummaryByVault() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/positions/summary/vaults`);
        });
    }
    stake(chainDescriptor, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/stake`, body);
        });
    }
    unstake(chainDescriptor, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/unstake`, body);
        });
    }
    withdraw(chainDescriptor, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/withdraw`, body);
        });
    }
    claimRewards(chainDescriptor, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/claimRewards`, body);
        });
    }
    split(chainDescriptor, body) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/chains/${chainDescriptor}/split`, body);
        });
    }
    getPositions(chainDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            const url = `${STAKING_BASE_PATH}/positions${chainDescriptor ? `?chainDescriptor=${chainDescriptor}` : ""}`;
            return yield this.apiClient.issueGetRequest(url);
        });
    }
    getPosition(positionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/positions/${positionId}`);
        });
    }
    getProviders() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${STAKING_BASE_PATH}/providers`);
        });
    }
    approveProviderTermsOfService(providerId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${STAKING_BASE_PATH}/providers/${providerId}/approveTermsOfService`, {});
        });
    }
}
exports.StakingApiClient = StakingApiClient;
//# sourceMappingURL=staking-api-client.js.map