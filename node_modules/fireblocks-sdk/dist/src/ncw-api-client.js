"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NcwApiClient = void 0;
const types_1 = require("./types");
const public_key_info_1 = require("./common/public_key_info");
class NcwApiClient {
    constructor(apiClient) {
        this.apiClient = apiClient;
        this.NCW_BASE_PATH = "/v1/ncw/wallets";
    }
    getSupportedAssets({ pageCursor, pageSize, onlyBaseAssets }) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(Object.assign(Object.assign(Object.assign({}, (pageCursor && { pageCursor })), (pageSize && { pageSize: pageSize.toString() })), (onlyBaseAssets !== undefined && { onlyBaseAssets: String(onlyBaseAssets) })));
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/supported_assets?${params.toString()}`);
        });
    }
    createWallet() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${this.NCW_BASE_PATH}`, {});
        });
    }
    getWallet(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}`);
        });
    }
    getLatestBackup(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/backup/latest`);
        });
    }
    enableWallet(walletId, enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePutRequest(`${this.NCW_BASE_PATH}/${walletId}/enable`, { enabled });
        });
    }
    getWalletDevice(walletId, deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/devices/${deviceId}`);
        });
    }
    getWalletDevices(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/devices/`);
        });
    }
    enableWalletDevice(walletId, deviceId, enabled) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePutRequest(`${this.NCW_BASE_PATH}/${walletId}/devices/${deviceId}/enable`, { enabled });
        });
    }
    invokeWalletRpc(walletId, deviceId, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${this.NCW_BASE_PATH}/${walletId}/devices/${deviceId}/invoke`, { payload });
        });
    }
    createWalletAccount(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts`, {});
        });
    }
    getWallets({ pageCursor, pageSize, sort, order } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(Object.assign(Object.assign(Object.assign(Object.assign({}, (pageCursor && { pageCursor })), (pageSize && { pageSize: pageSize.toString() })), (sort && { sort })), (order && { order })));
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}?${params.toString()}`);
        });
    }
    getWalletAccounts(walletId, { pageCursor, pageSize, sort, order } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(Object.assign(Object.assign(Object.assign(Object.assign({}, (pageCursor && { pageCursor })), (pageSize && { pageSize: pageSize.toString() })), (sort && { sort })), (order && { order })));
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts?${params.toString()}`);
        });
    }
    getWalletAccount(walletId, accountId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}`);
        });
    }
    getWalletAssets(walletId, accountId, { pageCursor, pageSize, sort, order } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(Object.assign(Object.assign(Object.assign(Object.assign({}, (pageCursor && { pageCursor })), (pageSize && { pageSize: pageSize.toString() })), (sort && { sort })), (order && { order })));
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets?${params.toString()}`);
        });
    }
    getWalletAsset(walletId, accountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets/${assetId}`);
        });
    }
    activateWalletAsset(walletId, accountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePostRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets/${assetId}`, {});
        });
    }
    getWalletAssetAddresses(walletId, accountId, assetId, { pageCursor, pageSize, sort, order } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = new URLSearchParams(Object.assign(Object.assign(Object.assign(Object.assign({}, (pageCursor && { pageCursor })), (pageSize && { pageSize: pageSize.toString() })), (sort && { sort })), (order && { order })));
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets/${assetId}/addresses?${params.toString()}`);
        });
    }
    getWalletAssetBalance(walletId, accountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets/${assetId}/balance`);
        });
    }
    refreshWalletAssetBalance(walletId, accountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePutRequest(`${this.NCW_BASE_PATH}/${walletId}/accounts/${accountId}/assets/${assetId}/balance`, {});
        });
    }
    getWalletSetupStatus(walletId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/setup_status`);
        });
    }
    getDeviceSetupStatus(walletId, deviceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`${this.NCW_BASE_PATH}/${walletId}/devices/${deviceId}/setup_status`);
        });
    }
    setWalletRequiredAlgorithms(walletId, algorithms) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issuePatchRequest(`${this.NCW_BASE_PATH}/${walletId}/required_algorithms`, { algorithms });
        });
    }
    getUnspentInputs(walletId, accountId, assetId) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueGetRequest(`/v1/ncw/${walletId}/accounts/${accountId}/${assetId}/unspent_inputs`);
        });
    }
    getPublicKeyInfo(walletId, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, public_key_info_1.getPublicKeyInfoImpl)(types_1.PeerType.END_USER_WALLET, args, this.apiClient, walletId);
        });
    }
    getPublicKeyInfoByAccountAsset(walletId, args) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (0, public_key_info_1.getPublicKeyInfoByAccountAssetImpl)(types_1.PeerType.END_USER_WALLET, args, this.apiClient, walletId);
        });
    }
    deleteSigningAlgorithm(walletId, algorithm) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.apiClient.issueDeleteRequest(`${this.NCW_BASE_PATH}/${walletId}/remove_signing_algorithm/${algorithm}`);
        });
    }
}
exports.NcwApiClient = NcwApiClient;
//# sourceMappingURL=ncw-api-client.js.map