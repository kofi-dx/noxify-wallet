"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPublicKeyInfoByAccountAssetImpl = exports.getPublicKeyInfoImpl = void 0;
const types_1 = require("../types");
const query_string_1 = __importDefault(require("query-string"));
function getPublicKeyInfoImpl(peerType, args, apiClient, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        let url;
        let requestOptions;
        if (peerType === types_1.PeerType.VAULT_ACCOUNT) {
            url = `/v1/vault/public_key_info`;
        }
        else if (peerType === types_1.PeerType.END_USER_WALLET) {
            requestOptions = { ncw: { walletId } };
            url = `/v1/ncw/${walletId}/public_key_info`;
        }
        else {
            throw new Error(`Unsupported peer type: ${peerType}`);
        }
        const query = query_string_1.default.stringify({
            algorithm: args.algorithm,
            derivationPath: JSON.stringify(args.derivationPath),
            compressed: args.compressed,
        });
        url += `?${query}`;
        return yield apiClient.issueGetRequest(url, undefined, requestOptions);
    });
}
exports.getPublicKeyInfoImpl = getPublicKeyInfoImpl;
function getPublicKeyInfoByAccountAssetImpl(peerType, args, apiClient, walletId) {
    return __awaiter(this, void 0, void 0, function* () {
        let url;
        let requestOptions;
        if (peerType === types_1.PeerType.VAULT_ACCOUNT) {
            url = `/v1/vault/accounts/${args.vaultAccountId}/${args.assetId}/${args.change}/${args.addressIndex}/public_key_info`;
        }
        else if (peerType === types_1.PeerType.END_USER_WALLET) {
            requestOptions = { ncw: { walletId } };
            url = `/v1/ncw/${walletId}/accounts/${args.accountId}/${args.assetId}/${args.change}/${args.addressIndex}/public_key_info`;
        }
        else {
            throw new Error(`Unsupported peer type: ${peerType}`);
        }
        const query = query_string_1.default.stringify({
            compressed: args.compressed,
        });
        url += `?${query}`;
        return yield apiClient.issueGetRequest(url, undefined, requestOptions);
    });
}
exports.getPublicKeyInfoByAccountAssetImpl = getPublicKeyInfoByAccountAssetImpl;
//# sourceMappingURL=public_key_info.js.map