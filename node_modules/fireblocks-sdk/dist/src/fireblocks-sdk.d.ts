import { ApiClient } from "./api-client";
import { IAuthProvider } from "./iauth-provider";
import { AllocateFundsRequest, AssetResponse, AssetTypeResponse, CancelTransactionResponse, ConvertExchangeAssetResponse, CreateTransactionResponse, DeallocateFundsRequest, DepositAddressResponse, EstimateFeeResponse, EstimateTransactionFeeResponse, ExchangeResponse, ExternalWalletAsset, FiatAccountResponse, GasStationInfo, GenerateAddressResponse, InternalWalletAsset, MaxSpendableAmountResponse, MaxBip44IndexUsedResponse, PaginatedAddressesResponse, OptionalPaginatedAddressesRequestFilters, NetworkConnectionResponse, OffExchangeEntityResponse, OperationSuccessResponse, PagedVaultAccountsRequestFilters, PagedVaultAccountsResponse, PublicKeyInfoArgs, PublicKeyInfoForVaultAccountArgs, RequestOptions, ResendWebhooksResponse, TransactionArguments, TransactionFilter, TransactionPageFilter, TransactionPageResponse, TransactionResponse, User, ValidateAddressResponse, VaultAccountResponse, VaultAssetResponse, VaultBalancesFilter, WalletContainerResponse, SetFeePayerConfiguration, FeePayerConfiguration, CreateWeb3ConnectionResponse, Session, NetworkConnectionRoutingPolicy, NetworkIdRoutingPolicy, NetworkIdResponse, TimePeriod, AuditsResponse, NFTOwnershipFilter, NFTOwnedAssetsFilter, Token, TokenWithBalance, Web3PagedResponse, CreateWalletConnectPayload, Web3ConnectionType, GetWeb3ConnectionsPayload, PublicKeyResponse, AllocateFundsResponse, AddCollateralTransactionRequest, RemoveCollateralTransactionRequest, GetSettlementTransactionsResponse, SettlementRequest, SettlementResponse, GetNFTsFilter, SettleOffExchangeAccountResponse, PublicKeyInformation, DropTransactionResponse, GetAssetWalletsFilters, GetAssetWalletsResponse, NFTOwnershipStatus, NFTOwnershipStatusUpdatedPayload, NFTOwnedCollectionsFilter, CollectionOwnership, TravelRuleOptions, ValidateTravelRuleVaspInfo, ValidateTravelRuleResult, ValidateCreateTravelRuleTransaction, ValidateFullTravelRuleResult, TravelRuleVasp, TravelRuleVaspFilter, TravelRuleEncryptionOptions, TravelRuleVaspForVaultRequestResponse, SmartTransfersTicketResponse, SmartTransfersTicketCreatePayload, SmartTransfersTicketsResponse, SmartTransfersTicketsFilters, SmartTransfersTicketTermPayload, SmartTransfersTicketTermFundPayload, ScreeningPolicyConfiguration, SmartTransfersTicketTermResponse, ConsoleUser, ApiUser, TRole, UsersGroup, SmartTransfersUserGroupsResponse, LeanContractTemplateDto, ContractTemplateDto, BatchTask, BatchJob, JobCreatedResponse, ContractUploadRequest, ContractDeployResponse, ContractDeployRequest, ExchangeAccountsPageFilter, PagedExchangeResponse, TAP, WriteCallFunctionDto, ReadCallFunctionDto, WriteCallFunctionResponseDto, ContractAbiResponseDto, DeployedContractResponseDto, TransactionReceiptResponseDto, LeanDeployedContractResponseDto, ParameterWithValueList, ScreeningTenantConfiguration, ScreeningType, ScreeningConfigurationsResponse, ScreeningPolicyRuleResponse, ScreeningProviderConfigurationResponse, AuditLogsResponse, TokenLink, IssueTokenRequest, TokenLinksCount, GetTokenLinksFilter, GetContractTemplatesFilter, SupportedContractTemplateType, AbiFunction, SupportedBlockchainsResponse, GetContractsFilter, TokenOwnershipSpamUpdatePayload, ScreeningSupportedAssetResponse, ScreeningSupportedProviders, RegisterAssetResponse, UnspentInputsResponse, ContractAddressResponseDto, AssetPriceResponse, CollectionLink, CreateCollectionRequest, CollectionTokenResponseDto, MintCollectionTokenRequest, BurnCollectionTokenRequest, ContractWithABIDto, RescanTx, RescanTxResponse, ListAssetsResponse, ListAssetsFilters, ListAssetResponse, ListBlockchainResponse, ListBlockchainsFilters, ListBlockchainsResponse, PaginatedInternalWalletContainerResponse } from "./types";
import { AxiosProxyConfig, AxiosResponse, InternalAxiosRequestConfig } from "axios";
import { NcwSdk } from "./ncw-sdk";
import { ChainInfo, CheckTermsOfServiceResponseDto, DelegationSummaryDto, DelegationSummaryDtoByVault, SplitRequestDto, SplitResponse, StakeRequestDto, StakeResponse, StakingChain, StakingPosition, StakingProvider, UnstakeRequestDto, UnstakeResponse, WithdrawRequestDto, WithdrawResponse } from "./staking";
export * from "./types";
export interface SDKOptions {
    /** HTTP request timeout */
    timeoutInMs?: number;
    /** Proxy configurations */
    proxy?: AxiosProxyConfig | false;
    /** Whether to remove platform from User-Agent header */
    anonymousPlatform?: boolean;
    /** Additional product identifier to be prepended to the User-Agent header */
    userAgent?: string;
    /** Replace default https agent */
    httpsAgent?: any;
    /**
     * Providing custom axios options including a response interceptor (https://axios-http.com/docs/interceptors)
     */
    customAxiosOptions?: {
        interceptors?: {
            request?: {
                onFulfilled: (value: InternalAxiosRequestConfig<any>) => InternalAxiosRequestConfig<any> | Promise<InternalAxiosRequestConfig<any>>;
                onRejected: (error: any) => any;
            };
            response?: {
                onFulfilled: (value: AxiosResponse<any, any>) => AxiosResponse<any, any> | Promise<AxiosResponse<any, any>>;
                onRejected: (error: any) => any;
            };
        };
    };
    /**
     * TravelRule Provider options to initialize PII Client for PII encryption
     */
    travelRuleOptions?: TravelRuleOptions;
}
export declare class FireblocksSDK {
    private readonly authProvider;
    private readonly apiBaseUrl;
    private readonly apiClient;
    private readonly apiNcw;
    private readonly stakingApiClient;
    private piiClient;
    /**
     * Creates a new Fireblocks API Client
     * @param privateKey A string representation of your private key
     * @param apiKey Your api key. This is a uuid you received from Fireblocks
     * @param apiBaseUrl The fireblocks server URL. Leave empty to use the default server
     * @param authProvider
     * @param sdkOptions
     */
    constructor(privateKey: string, apiKey: string, apiBaseUrl?: string, authProvider?: IAuthProvider, sdkOptions?: SDKOptions);
    /**
     * NCW API Namespace
     *
     * @readonly
     * @type {NcwSdk}
     */
    get NCW(): NcwSdk;
    /**
     * Get the instance of ApiClient used by the FireblocksSDK
     */
    getApiClient(): ApiClient;
    /**
     * Get all staking chains
     */
    getStakingChains(): Promise<string[]>;
    /**
     * Get chain info
     */
    getStakingChainInfo(chainDescriptor: StakingChain): Promise<ChainInfo>;
    /**
     * Get staking positions summary
     */
    getStakingPositionsSummary(): Promise<DelegationSummaryDto>;
    /**
     * Get staking positions summary by vault
     */
    getStakingPositionsSummaryByVault(): Promise<DelegationSummaryDtoByVault>;
    /**
     * Initiate staking stake on a chain
     */
    executeStakingStake(chainDescriptor: StakingChain, body: StakeRequestDto): Promise<StakeResponse>;
    /**
     * Execute staking unstake on a chain
     */
    executeStakingUnstake(chainDescriptor: StakingChain, body: UnstakeRequestDto): Promise<UnstakeResponse>;
    /**
     * Execute staking withdraw on a chain
     */
    executeStakingWithdraw(chainDescriptor: StakingChain, body: WithdrawRequestDto): Promise<WithdrawResponse>;
    /**
     * Execute staking claim rewards on a chain
     */
    executeStakingClaimRewards(chainDescriptor: StakingChain, body: WithdrawRequestDto): Promise<WithdrawResponse>;
    /**
     * Execute staking split on a chain
     */
    executeStakingSplit(chainDescriptor: StakingChain, body: SplitRequestDto): Promise<SplitResponse>;
    /**
     * Get all staking positions, optionally filtered by chain
     */
    getStakingPositions(chainDescriptor?: StakingChain): Promise<StakingPosition[]>;
    /**
     * Get a staking position by id
     */
    getStakingPosition(positionId: string): Promise<StakingPosition>;
    /**
     * Get all staking providers
     */
    getStakingProviders(): Promise<StakingProvider[]>;
    /**
     * Approve staking provider terms of service
     */
    approveStakingProviderTermsOfService(providerId: string): Promise<CheckTermsOfServiceResponseDto>;
    /**
     * Gets all assets that are currently supported by Fireblocks
     */
    getSupportedAssets(): Promise<AssetTypeResponse[]>;
    /**
     * Sets asset price
     * @param id The asset ID
     * @param currency The currency (according to ISO 4217 currency codes)
     * @param price The price in currency
     */
    setAssetPrice(id: string, currency: string, price: number): Promise<AssetPriceResponse>;
    /**
     * Gets a list of vault accounts per page matching the given filter or path
     * @param pagedVaultAccountsRequestFilters Filters for the first request
     */
    getVaultAccountsWithPageInfo(pagedVaultAccountsRequestFilters: PagedVaultAccountsRequestFilters): Promise<PagedVaultAccountsResponse>;
    /**
     * Gets a list of asset wallets per page matching the given filter or path
     * @param getVaultWalletsFilters Filters for the first request
     */
    getAssetWallets(getVaultWalletsFilters: GetAssetWalletsFilters): Promise<GetAssetWalletsResponse>;
    /**
     * Gets a single vault account
     * @param vaultAccountId The vault account ID
     */
    getVaultAccountById(vaultAccountId: string): Promise<VaultAccountResponse>;
    /**
     * Gets a single vault account asset
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     */
    getVaultAccountAsset(vaultAccountId: string, assetId: string): Promise<AssetResponse>;
    /**
     * Gets a single vault account asset balance after forcing refresh from the blockchain
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset to get
     * @param requestOptions
     */
    refreshVaultAssetBalance(vaultAccountId: string, assetId: string, requestOptions?: RequestOptions): Promise<AssetResponse>;
    /**
     * Gets deposit addresses for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the deposit address
     */
    getDepositAddresses(vaultAccountId: string, assetId: string): Promise<DepositAddressResponse[]>;
    /**
     * Gets utxo list for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to get the utxo list
     */
    getUnspentInputs(vaultAccountId: string, assetId: string): Promise<UnspentInputsResponse[]>;
    /**
     * Generates a new address for an asset in a vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset for which to generate the deposit address
     * @param description A description for the new address
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    generateNewAddress(vaultAccountId: string, assetId: string, description?: string, customerRefId?: string, requestOptions?: RequestOptions): Promise<GenerateAddressResponse>;
    /**
     * Sets the description of an existing address
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address for which to set the description
     * @param tag The XRP tag, or EOS memo, for which to set the description
     * @param description The description to set
     */
    setAddressDescription(vaultAccountId: string, assetId: string, address: string, tag?: string, description?: string): Promise<OperationSuccessResponse>;
    /**
     * Gets all network connections
     * @returns NetworkConnectionResponse
     */
    getNetworkConnections(): Promise<NetworkConnectionResponse[]>;
    /**
     * Creates a network connection
     * @param localNetworkId The local netowrk profile's id
     * @param remoteNetworkId The remote network profile's id
     * @param routingPolicy The desired routing policy for the connection
     * @returns NetworkConnectionResponse
     */
    createNetworkConnection(localNetworkId: string, remoteNetworkId: string, routingPolicy?: NetworkConnectionRoutingPolicy): Promise<NetworkConnectionResponse>;
    /**
     * Gets a single network connection
     * @param connectionId The network connection's id
     * @returns NetworkConnectionResponse
     */
    getNetworkConnectionById(connectionId: string): Promise<NetworkConnectionResponse>;
    /**
     * Removes a network connection
     * @param connectionId The network connection's id
     * @returns OperationSuccessResponse
     */
    removeNetworkConnection(connectionId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets routing policy for a network connection
     * @param connectionId The network connection's id
     * @param routingPolicy The desired routing policy
     */
    setNetworkConnectionRoutingPolicy(connectionId: string, routingPolicy: NetworkConnectionRoutingPolicy): Promise<void>;
    /**
     * Gets all discoverable network profiles
     * @returns NetworkIdResponse
     */
    getDiscoverableNetworkIds(): Promise<NetworkIdResponse[]>;
    /**
     * Creates a new network profile
     * @param name A name for the new network profile
     * @param routingPolicy The desired routing policy for the network
     * @returns NetworkConnectionResponse
     */
    createNetworkId(name: string, routingPolicy?: NetworkIdRoutingPolicy): Promise<NetworkIdResponse>;
    /**
     * Gets a single network profile
     * @param networkId The network profile's id
     * @returns NetworkIdResponse
     */
    getNetworkId(networkId: string): Promise<NetworkIdResponse>;
    /**
     * Deletes a single network profile
     * @param networkId The network profile's id
     * @returns NetworkIdResponse
     */
    deleteNetworkId(networkId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets discoverability for network profile
     * @param networkId The network profile's id
     * @param isDiscoverable The desired discoverability to set
     * @returns OperationSuccessResponse
     */
    setNetworkIdDiscoverability(networkId: string, isDiscoverable: boolean): Promise<OperationSuccessResponse>;
    /**
     * Sets routing policy for network profile
     * @param networkId The network profile's id
     * @param routingPolicy The desired routing policy
     * @returns OperationSuccessResponse
     */
    setNetworkIdRoutingPolicy(networkId: string, routingPolicy: NetworkIdRoutingPolicy): Promise<void>;
    /**
     * Sets network profile name
     * @param networkId The network profile's id
     * @param name The desired network profile's name
     * @returns OperationSuccessResponse
     */
    setNetworkIdName(networkId: string, name: string): Promise<void>;
    /**
     * Gets all exchange accounts for your tenant
     */
    getExchangeAccounts(): Promise<ExchangeResponse[]>;
    /**
     * Gets all exchange accounts for your tenant
     * @param filter Get exchange accounts matching pageFilter params
     */
    getExchangeAccountsPaged(filter: ExchangeAccountsPageFilter): Promise<PagedExchangeResponse>;
    /**
     * Gets a single exchange account by ID
     * @param exchangeAccountId The exchange account ID
     */
    getExchangeAccountById(exchangeAccountId: string): Promise<ExchangeResponse>;
    /**
     * Gets a single asset within an Exchange Account
     * @param exchangeAccountId The exchange account ID
     * @param assetId The ID of the asset
     */
    getExchangeAsset(exchangeAccountId: string, assetId: string): Promise<AssetResponse>;
    /**
     * Convert an asset at an Exchange Account
     * @param exchangeAccountId The exchange account ID
     * @param srcAsset The source asset to convert from
     * @param destAsset The destination asset to convert to
     * @param amount The amount to convert
     */
    convertExchangeAsset(exchangeAccountId: string, srcAsset: string, destAsset: string, amount: number, requestOptions?: RequestOptions): Promise<ConvertExchangeAssetResponse>;
    /**
     * Transfer from a main exchange account to a subaccount
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     * @param requestOptions
     */
    transferToSubaccount(exchangeAccountId: string, subaccountId: string, assetId: string, amount: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Transfer from a subaccount to a main exchange account
     * @param exchangeAccountId The exchange ID in Fireblocks
     * @param subaccountId The ID of the subaccount in the exchange
     * @param assetId The asset to transfer
     * @param amount The amount to transfer
     * @param requestOptions
     */
    transferFromSubaccount(exchangeAccountId: string, subaccountId: string, assetId: string, amount: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Gets all fiat accounts for your tenant
     */
    getFiatAccounts(): Promise<FiatAccountResponse[]>;
    /**
     * Gets a single fiat account by ID
     * @param accountId The fiat account ID
     */
    getFiatAccountById(accountId: string): Promise<FiatAccountResponse>;
    /**
     * Redeem from a fiat account to a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     * @param requestOptions
     */
    redeemToLinkedDDA(accountId: string, amount: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Deposit to a fiat account from a linked DDA
     * @param accountId The fiat account ID in Fireblocks
     * @param amount The amount to transfer
     * @param requestOptions
     */
    depositFromLinkedDDA(accountId: string, amount: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Gets a list of transactions matching the given filter
     * @param filter.before Only gets transactions created before a given timestamp (in milliseconds)
     * @param filter.after Only gets transactions created after a given timestamp (in milliseconds)
     * @param filter.status Only gets transactions with the spcified status
     * @param filter.limit Limit the amount of returned results. If not specified, a limit of 200 results will be used
     * @param filter.orderBy Determines the order of the results
     */
    getTransactions(filter: TransactionFilter): Promise<TransactionResponse[]>;
    /**
     * Gets a list of transactions per page matching the given filter or path
     * @param pageFilter Get transactions matching pageFilter params
     * @param nextOrPreviousPath Get transactions from each of pageDetails paths
     */
    getTransactionsWithPageInfo(pageFilter?: TransactionPageFilter, nextOrPreviousPath?: string): Promise<TransactionPageResponse>;
    /**
     * Gets a transaction matching the external transaction id provided
     * @param externalTxId
     */
    getTransactionByExternalTxId(externalTxId: string): Promise<TransactionResponse>;
    /**
     * Gets all internal wallets for your tenant
     */
    getInternalWallets(): Promise<WalletContainerResponse<InternalWalletAsset>[]>;
    /**
     * Gets a single internal wallet
     * @param walletId The internal wallet ID
     */
    getInternalWallet(walletId: string): Promise<WalletContainerResponse<InternalWalletAsset>>;
    /**
     * Gets a paginated response of assets for a single internal wallet
     * @param walletId The internal wallet ID
     * @param pageSize Number of assets to return per page (default=50, max=200)
     * @param pageCursor Cursor for pagination
     */
    getInternalWalletAssets(walletId: string, pageSize?: number, pageCursor?: string): Promise<PaginatedInternalWalletContainerResponse>;
    /**
     * Gets a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    getInternalWalletAsset(walletId: string, assetId: string): Promise<InternalWalletAsset>;
    /**
     * Gets all external wallets for your tenant
     */
    getExternalWallets(): Promise<WalletContainerResponse<ExternalWalletAsset>[]>;
    /**
     * Gets a single external wallet
     * @param walletId The external wallet ID
     */
    getExternalWallet(walletId: string): Promise<WalletContainerResponse<ExternalWalletAsset>>;
    /**
     * Gets a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    getExternalWalletAsset(walletId: string, assetId: string): Promise<ExternalWalletAsset>;
    /**
     * Gets all contract wallets for your tenant
     */
    getContractWallets(): Promise<WalletContainerResponse<ExternalWalletAsset>[]>;
    /**
     * Gets a single contract wallet
     * @param walletId The contract wallet ID
     */
    getContractWallet(walletId: string): Promise<WalletContainerResponse<ExternalWalletAsset>>;
    /**
     * Gets a single contract wallet asset
     * @param walletId The contract wallet ID
     * @param assetId The asset ID
     */
    getContractWalletAsset(walletId: string, assetId: string): Promise<ExternalWalletAsset>;
    /**
     * Gets detailed information for a single transaction
     * @param txId The transaction id to query
     */
    getTransactionById(txId: string): Promise<TransactionResponse>;
    /**
     * Cancels the selected transaction
     * @param txId The transaction id to cancel
     * @param requestOptions
     */
    cancelTransactionById(txId: string, requestOptions?: RequestOptions): Promise<CancelTransactionResponse>;
    /**
     * Creates a new vault account
     * @param name A name for the new vault account
     * @param hiddenOnUI If true, the created account and all related transactions will not be shown on Fireblocks console
     * @param customerRefId A customer reference ID
     * @param autoFuel
     * @param requestOptions
     * @param autoFuel
     * @param requestOptions
     */
    createVaultAccount(name: string, hiddenOnUI?: boolean, customerRefId?: string, autoFuel?: boolean, requestOptions?: RequestOptions): Promise<VaultAccountResponse>;
    /**
     * Hides a vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     * @param requestOptions
     */
    hideVaultAccount(vaultAccountId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Reveals a hidden vault account in Fireblocks console
     * @param vaultAccountId The vault account ID
     * @param requestOptions
     */
    unhideVaultAccount(vaultAccountId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Sets autoFuel to true/false for a vault account
     * @param vaultAccountId The vault account ID
     * @param autoFuel The new value for the autoFuel flag
     * @param requestOptions
     */
    setAutoFuel(vaultAccountId: string, autoFuel: boolean, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Updates a vault account
     * @param vaultAccountId
     * @param name A new name for the vault account
     */
    updateVaultAccount(vaultAccountId: string, name: string): Promise<VaultAccountResponse>;
    /**
     * Creates a new asset within an existing vault account
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     * @param requestOptions
     */
    createVaultAsset(vaultAccountId: string, assetId: string, requestOptions?: RequestOptions): Promise<VaultAssetResponse>;
    /**
     * Registers new asset
     * @param blockchainId Native asset of blockchain
     * @param address Asset contract address
     * @param symbol Asset symbol
     * @param requestOptions
     */
    registerNewAsset(blockchainId: string, address: string, symbol?: string, requestOptions?: RequestOptions): Promise<RegisterAssetResponse>;
    /**
     * List assets
     * @param filters
     */
    listAssets(filters?: ListAssetsFilters): Promise<ListAssetsResponse>;
    /**
     * Get an asset
     * @param assetId The ID or legacyId of the asset
     */
    getAssetById(assetId: string): Promise<ListAssetResponse>;
    /**
     * List blockchains
     * @param filters
     */
    listBlockchains(filters?: ListBlockchainsFilters): Promise<ListBlockchainsResponse>;
    /**
     * Get an blockchain
     * @param blockchainId The ID or legacyId of the blockchain
     */
    getBlockchainById(blockchainId: string): Promise<ListBlockchainResponse>;
    /**
     * Retry to create a vault asset for a vault asset that failed
     * @param vaultAccountId The vault account ID
     * @param assetId The asset to add
     * @param requestOptions
     */
    activateVaultAsset(vaultAccountId: string, assetId: string, requestOptions?: RequestOptions): Promise<VaultAssetResponse>;
    /**
     * Creates a new external wallet
     * @param name A name for the new external wallet
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    createExternalWallet(name: string, customerRefId?: string, requestOptions?: RequestOptions): Promise<WalletContainerResponse<ExternalWalletAsset>>;
    /**
     * Creates a new internal wallet
     * @param name A name for the new internal wallet
     * @param customerRefId A customer reference ID
     * @param requestOptions
     */
    createInternalWallet(name: string, customerRefId?: string, requestOptions?: RequestOptions): Promise<WalletContainerResponse<InternalWalletAsset>>;
    /**
     * Creates a new contract wallet
     * @param name A name for the new contract wallet
     */
    createContractWallet(name: string, requestOptions?: RequestOptions): Promise<WalletContainerResponse<ExternalWalletAsset>>;
    /**
     * Creates a new asset within an exiting external wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     * @param requestOptions
     */
    createExternalWalletAsset(walletId: string, assetId: string, address: string, tag?: string, requestOptions?: RequestOptions): Promise<ExternalWalletAsset>;
    /**
     * Creates a new asset within an exiting internal wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     * @param requestOptions
     */
    createInternalWalletAsset(walletId: string, assetId: string, address: string, tag?: string, requestOptions?: RequestOptions): Promise<InternalWalletAsset>;
    /**
     * Creates a new asset within an exiting contract wallet
     * @param walletId The wallet id
     * @param assetId The asset to add
     * @param address The wallet address
     * @param tag (for ripple only) The ripple account tag
     */
    createContractWalletAsset(walletId: string, assetId: string, address: string, tag?: string, requestOptions?: RequestOptions): Promise<ExternalWalletAsset>;
    /**
     * Creates a new transaction with the specified options
     */
    createTransaction(transactionArguments: TransactionArguments, requestOptions?: RequestOptions, travelRuleEncryptionOptions?: TravelRuleEncryptionOptions): Promise<CreateTransactionResponse>;
    /**
     * Estimates the fee for a transaction request
     */
    estimateFeeForTransaction(transactionArguments: TransactionArguments, requestOptions?: RequestOptions): Promise<EstimateTransactionFeeResponse>;
    /**
     * Gets the estimated fees for an asset
     */
    getFeeForAsset(asset: string): Promise<EstimateFeeResponse>;
    /**
     * Deletes a single internal wallet
     * @param walletId The internal wallet ID
     */
    deleteInternalWallet(walletId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single internal wallet asset
     * @param walletId The internal wallet ID
     * @param assetId The asset ID
     */
    deleteInternalWalletAsset(walletId: string, assetId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single external wallet
     * @param walletId The external wallet ID
     */
    deleteExternalWallet(walletId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single external wallet asset
     * @param walletId The external wallet ID
     * @param assetId The asset ID
     */
    deleteExternalWalletAsset(walletId: string, assetId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single contract wallet
     * @param walletId The contract wallet ID
     */
    deleteContractWallet(walletId: string): Promise<OperationSuccessResponse>;
    /**
     * Deletes a single contract wallet asset
     * @param walletId The contract wallet ID
     * @param assetId The asset ID
     */
    deleteContractWalletAsset(walletId: string, assetId: string): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForVaultAccount(vaultAccountId: string, customerRefId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the internal wallet
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForInternalWallet(walletId: string, customerRefId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param walletId The ID of the external wallet
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForExternalWallet(walletId: string, customerRefId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Sets a customer reference ID
     * @param vaultAccountId The vault account ID
     * @param assetId The ID of the asset
     * @param address The address
     * @param tag The XRP tag, or EOS memo
     * @param customerRefId The customer reference ID to set
     * @param requestOptions
     */
    setCustomerRefIdForAddress(vaultAccountId: string, assetId: string, address: string, tag?: string, customerRefId?: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Set the required number of confirmations for transaction
     * @param txId
     * @param requiredConfirmationsNumber
     * @param requestOptions
     */
    setConfirmationThresholdForTxId(txId: string, requiredConfirmationsNumber: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Set the required number of confirmations for transactions by tx hash
     * @param txHash
     * @param requiredConfirmationsNumber
     * @param requestOptions
     */
    setConfirmationThresholdForTxHash(txHash: string, requiredConfirmationsNumber: number, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Get the public key information
     * @param args
     */
    getPublicKeyInfo(args: PublicKeyInfoArgs): Promise<PublicKeyInformation>;
    /**
     * allocate funds from you default balance to a private ledger
     * @param vaultAccountId
     * @param asset
     * @param vaultAccountId
     * @param asset
     * @param args
     * @param requestOptions
     */
    allocateFundsToPrivateLedger(vaultAccountId: string, asset: string, args: AllocateFundsRequest, requestOptions?: RequestOptions): Promise<AllocateFundsResponse>;
    /**
     * deallocate funds from a private ledger to your default balance
     * @param vaultAccountId
     * @param asset
     * @param args
     * @param requestOptions
     */
    deallocateFundsFromPrivateLedger(vaultAccountId: string, asset: string, args: DeallocateFundsRequest, requestOptions?: RequestOptions): Promise<AllocateFundsResponse>;
    /**
     * Get the public key information for a vault account
     * @param args
     */
    getPublicKeyInfoForVaultAccount(args: PublicKeyInfoForVaultAccountArgs): Promise<PublicKeyResponse>;
    /**
     * Get configuration and status of the Gas Station account
     */
    getGasStationInfo(assetId?: string): Promise<GasStationInfo>;
    /**
     * Set configuration of the Gas Station account
     */
    setGasStationConfiguration(gasThreshold: string, gasCap: string, maxGasPrice?: string, assetId?: string): Promise<OperationSuccessResponse>;
    /**
     * Drop an ETH based transaction
     */
    dropTransaction(txId: string, feeLevel?: string, requestedFee?: string, requestOptions?: RequestOptions): Promise<DropTransactionResponse>;
    /**
     * Get max spendable amount per asset and vault
     */
    getMaxSpendableAmount(vaultAccountId: string, assetId: string, manualSigning?: Boolean): Promise<MaxSpendableAmountResponse>;
    /**
     * Get maximum BIP44 index used in deriving addresses or in change addresses
     */
    getMaxBip44IndexUsed(vaultAccountId: string, assetId: string): Promise<MaxBip44IndexUsedResponse>;
    /**
     * Gets a paginated response of the addresses for a given vault account and asset
     */
    getPaginatedAddresses(vaultAccountId: string, assetId: string, paginatedAddressesRequestFilters?: OptionalPaginatedAddressesRequestFilters): Promise<PaginatedAddressesResponse>;
    /**
     * Get all vault assets balance overview
     */
    getVaultAssetsBalance(filter: VaultBalancesFilter): Promise<AssetResponse[]>;
    /**
     * Get vault balance overview per asset
     */
    getVaultBalanceByAsset(assetId: string): Promise<AssetResponse>;
    /**
     * Get address validation info
     */
    validateAddress(assetId: string, address: string): Promise<ValidateAddressResponse>;
    /**
     * Unfreezes the selected transaction
     * @param txId The transaction id to unfreeze
     * @param requestOptions
     */
    unfreezeTransactionById(txId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Freezes the selected transaction
     * @param txId The transaction id to freeze
     * @param requestOptions
     */
    freezeTransactionById(txId: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Resend failed webhooks
     */
    resendWebhooks(requestOptions?: RequestOptions): Promise<ResendWebhooksResponse>;
    /**
     * Resend transaction webhooks
     * @param txId The transaction for which the message is sent
     * @param resendCreated If true a webhook will be sent for the creation of the transaction
     * @param resendStatusUpdated If true a webhook will be sent for the status of the transaction
     * @param requestOptions
     */
    resendTransactionWebhooksById(txId: string, resendCreated?: boolean, resendStatusUpdated?: boolean, requestOptions?: RequestOptions): Promise<ResendWebhooksResponse>;
    /**
     * Gets all Users for your tenant
     */
    getUsers(): Promise<User[]>;
    /**
     * Gets all Console Users for your tenant
     */
    getConsoleUsers(): Promise<{
        users: ConsoleUser[];
    }>;
    /**
     * Gets all Api Users for your tenant
     */
    getApiUsers(): Promise<{
        users: ApiUser[];
    }>;
    /**
     * Create Console User for your tenant
     * @param firstName firstName of the user, example: "Johnny".  Maximum length: 30 chars.
     * @param lastName lastName of the user. Maximum length: 30 chars.
     * @param email email of the user, example: "email@example.com"
     * @param role role of the user, for example: "ADMIN"
     * @param requestOptions
     */
    createConsoleUser(firstName: string, lastName: string, email: string, role: TRole, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Create Api User for your tenant
     * @param name name of the api user, example: "Johnny The Api".  Maximum length: 30 chars.
     * @param role role of the user, for example: "ADMIN"
     * @param csrPem generate .csr file and provide its string content here, example:  "-----BEGIN CERTIFICATE REQUEST-----aaa-----END CERTIFICATE REQUEST-----"
     * You can find more info about csrPem and how to create it here: https://developers.fireblocks.com/docs/quickstart
     * @param coSignerSetup your cosigner, for example: "SGX_MACHINE", read more: https://developers.fireblocks.com/docs/quickstart
     * @param coSignerSetupIsFirstUser [SGX server enabled only] If you are the first user to be configured on this SGX-enabled Co-Signer server, this has to be true
     */
    createApiUser(name: string, role: TRole, csrPem: string, coSignerSetup?: string, coSignerSetupIsFirstUser?: boolean, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Re-enroll Mobile Device of a user in your tenant
     * @param id userId of the user to reset device
     * @param requestOptions
     */
    resetDeviceRequest(id: string, requestOptions?: RequestOptions): Promise<OperationSuccessResponse>;
    /**
     * Get whitelisted addresses of api user in your tenant
     * @param id userId of the user
     * @param requestOptions
     */
    getWhitelistedAddresses(id: string): Promise<OperationSuccessResponse>;
    /**
     * Get the tenant's OTA (One-Time-Address) configuration
     */
    getOtaConfiguration(): Promise<{
        enabled: boolean;
    }>;
    /**
     * Update the tenant's OTA (One-Time-Address) configuration
     * @param enable
     */
    updateOtaConfiguration(enable: boolean): Promise<void>;
    /** Gets all Users Groups for your tenant
     */
    getUserGroups(): Promise<UsersGroup[]>;
    /**
     * Gets a Users Group by ID
     * @param id The ID of the User
     */
    getUserGroup(id: string): Promise<UsersGroup>;
    /**
     * Creates a new Users Group
     * @param name The name of the Users Group
     * @param memberIds The members of the Users Group
     */
    createUserGroup(groupName: string, memberIds?: string[]): Promise<UsersGroup>;
    /**
     * Updates a Users Group
     * @param id The ID of the Users Group
     * @param name The name of the Users Group
     * @param memberIds The members of the Users Group
     */
    updateUserGroup(id: string, groupName?: string, memberIds?: string[]): Promise<UsersGroup>;
    /**
     * Deletes a Users Group
     * @param id The ID of the Users Group
     */
    deleteUserGroup(id: string): Promise<void>;
    /**
     * Get off exchange accounts
     */
    getOffExchangeAccounts(): Promise<OffExchangeEntityResponse[]>;
    /**
     * Get off exchange account by virtual account id
     * @param id the ID of the off exchange
     */
    getOffExchangeAccountById(id: string): Promise<OffExchangeEntityResponse>;
    /**
     * Settle off exchange account by virtual account id
     * @param id the ID of the off exchange
     * @param requestOptions
     */
    settleOffExchangeAccountById(id: string, requestOptions?: RequestOptions): Promise<SettleOffExchangeAccountResponse>;
    /**
     * Add collateral account, create deposit request
     * @param depositRequest
     * @param requestOptions
     */
    addCollateral(depositRequest: AddCollateralTransactionRequest, requestOptions?: RequestOptions): Promise<CreateTransactionResponse>;
    /**
     * Remove collateral account, create withdraw request
     * @param withdrawRequest
     * @param requestOptions
     */
    removeCollateral(withdrawRequest: RemoveCollateralTransactionRequest, requestOptions?: RequestOptions): Promise<CreateTransactionResponse>;
    /**
     *
     * @param requestOptions
     */
    getSettlementTransactions(settlementRequest: SettlementRequest): Promise<GetSettlementTransactionsResponse>;
    /**
     *
     * @param settlementRequest
     * @param requestOptions
     */
    settlement(settlementRequest: SettlementRequest, requestOptions?: RequestOptions): Promise<SettlementResponse>;
    /**
     * Set Fee Payer configuration
     * @param feePayerConfiguration
     * @param baseAsset
     * @param requestOptions
     */
    setFeePayerConfiguration(baseAsset: string, feePayerConfiguration: SetFeePayerConfiguration, requestOptions?: RequestOptions): Promise<FeePayerConfiguration>;
    /**
     * Get Fee Payer Configuration
     * @param baseAsset
     */
    getFeePayerConfiguration(baseAsset: string): Promise<FeePayerConfiguration>;
    /**
     * Delete Fee Payer Configuration
     * @param baseAsset
     */
    removeFeePayerConfiguration(baseAsset: string): Promise<void>;
    private getWeb3ConnectionPath;
    /**
     * Get all signer connections of the current tenant
     * @param {Object} payload The payload for getting the current tenant's sessions
     * @param payload.pageCursor The cursor for the next page
     * @param payload.pageSize The amount of results to return on the next page
     * @param payload.sort The property to sort the results by
     * @param payload.filter The filter object, containing properties as keys and the values to filter by as values
     * @param payload.order Should the results be ordered in ascending order (false) or descending (true)
     *
     * @returns An object containing the data returned and the cursor for the next page
     */
    getWeb3Connections({ pageCursor, pageSize, sort, filter, order, }?: GetWeb3ConnectionsPayload, requestOptions?: RequestOptions): Promise<Web3PagedResponse<Session>>;
    /**
     * Initiate a new web3 connection
     * @param type The type of the connection
     * @param payload The payload for creating a new web3 connection
     * @param requestOptions
     * @param payload.vaultAccountId The vault account to link with the dapp
     * @param payload.feeLevel The fee level for the connection
     * @param payload.uri The WalletConnect URI, as provided by the dapp
     * @param payload.chainIds Array of the approved chains for the connection
     *
     * @returns The created session's ID and it's metadata
     * @example {
     *  vaultAccountId: 0
     *  feeLevel: "MEDIUM"
     *  connectionType: "WalletConnect"
     *  uri: "wc:77752975-906f-48f5-b59f-047826ee947e@1?bridge=https%3A%2F%2F0.bridge.walletconnect.org&key=64be99adc6086b7a729b0ec8c7e1f174927ab92e84f5c6f9527050225344a637"
     *  chainIds: ["ETH", "ETH_TEST"]
     * }
     */
    createWeb3Connection(type: Web3ConnectionType.WALLET_CONNECT, payload: CreateWalletConnectPayload, requestOptions?: RequestOptions): Promise<CreateWeb3ConnectionResponse>;
    /**
     * Approve or Reject the initiated connection
     * @param type The type of the connection
     * @param sessionId The ID of the session
     * @param approve Whether you approve the connection or not
     */
    submitWeb3Connection(type: Web3ConnectionType.WALLET_CONNECT, sessionId: string, approve: boolean, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Remove an existing connection
     * @param type The type of the connection
     * @param sessionId The ID of the session
     */
    removeWeb3Connection(type: Web3ConnectionType.WALLET_CONNECT, sessionId: string, requestOptions?: RequestOptions): Promise<void>;
    /**
     * Gets all audits for selected time period
     * @param timePeriod
     * @param cursor
     */
    getAudits(timePeriod?: TimePeriod): Promise<AuditsResponse>;
    /**
     * Gets paginated audit logs for selected time period
     * @param timePeriod
     * @param cursor
     */
    getPaginatedAuditLogs(timePeriod?: TimePeriod, cursor?: string): Promise<AuditLogsResponse>;
    /**
     *
     * @param id
     */
    getNFT(id: string): Promise<Token>;
    /**
     * @param {Object} payload
     * @param payload.pageCursor
     * @param payload.pageSize
     * @param payload.ids
     * @param payload.sort
     * @param payload.order
     */
    getNFTs({ pageCursor, pageSize, ids, sort, order }: GetNFTsFilter): Promise<Web3PagedResponse<Token>>;
    /**
     *
     * Gets a list of owned NFT tokens
     * @param filter.vaultAccountIds List of vault account IDs
     * @param filter.blockchainDescriptor The blockchain descriptor (based on legacy asset)
     * @param filter.collectionIds List of collection IDs
     * @param filter.ids List of token ids to fetch
     * @param filter.pageCursor Page cursor
     * @param filter.pageSize Page size
     * @param filter.sort Sort by value
     * @param filter.order Order value
     * @param filter.status Status (LISTED, ARCHIVED)
     * @param filter.search Search filter
     * @param filter.ncwAccountIds List of Non-Custodial wallet account IDs
     * @param filter.ncwId Non-Custodial wallet id
     * @param filter.walletType Wallet type (VAULT_ACCOUNT, END_USER_WALLET)
     * @param filter.spam Spam filter (true, false, all)
     */
    getOwnedNFTs(filter?: NFTOwnershipFilter): Promise<Web3PagedResponse<TokenWithBalance>>;
    /**
     *
     * Get a list of owned NFT collections
     * @param filter.search Search by value
     * @param filter.status Status (LISTED, ARCHIVED)
     * @param filter.ncwId Non-Custodial wallet id
     * @param filter.walletType Wallet type (VAULT_ACCOUNT, END_USER_WALLET)
     * @param filter.pageCursor Page cursor
     * @param filter.pageSize Page size
     * @param filter.sort Sort by value
     * @param filter.order Order by value
     */
    listOwnedCollections(filter?: NFTOwnedCollectionsFilter): Promise<Web3PagedResponse<CollectionOwnership>>;
    /**
     *
     * Get a list of owned tokens
     * @param filter.search Search by value
     * @param filter.status Status (LISTED, ARCHIVED)
     * @param filter.ncwId Non-Custodial wallet id
     * @param filter.walletType Wallet type (VAULT_ACCOUNT, END_USER_WALLET)
     * @param filter.pageCursor Page cursor
     * @param filter.pageSize Page size
     * @param filter.sort Sort by value
     * @param filter.order Order by value
     * @param filter.spam Spam filter (true, false, all)
     */
    listOwnedAssets(filter?: NFTOwnedAssetsFilter): Promise<Web3PagedResponse<Token>>;
    /**
     *
     * @param id
     */
    refreshNFTMetadata(id: string): Promise<void>;
    /**
     *
     * Update NFT ownership status for specific token
     * @param id NFT asset id
     * @param status Status for update
     */
    updateNFTOwnershipStatus(id: string, status: NFTOwnershipStatus): Promise<void>;
    /**
     *
     * Updates tokens status for a tenant, in all tenant vaults.
     * @param payload List of assets with status for update
     */
    updateNFTOwnershipsStatus(payload: NFTOwnershipStatusUpdatedPayload[]): Promise<void>;
    /**
     *
     * @param vaultAccountId
     * @param blockchainDescriptor
     */
    refreshNFTOwnershipByVault(vaultAccountId: string, blockchainDescriptor: string): Promise<void>;
    /**
     *
     * @param payload.assetId NFT asset id
     * @param payload.spam Spam status
     */
    updateNFTTokenOwnershipSpamStatus(payload: TokenOwnershipSpamUpdatePayload[]): Promise<void>;
    /**
     * Get all contract templates
     * @param {Object} payload The payload for getting the current tenant's sessions
     * @param {ContractInitializationPhase} payload.initializationPhase The contract initialization phase
     * @param {ContractTemplateType} payload.type The type of the contract templates you wish to retrieve. May contain more than one type
     * @param {number} payload.pageSize The amount of results to return on the next page
     * @param {string} payload.pageCursor The cursor for the next page
     *
     * @returns {LeanContractTemplateDto[]} A paginated array of contract templates
     */
    getContractTemplates({ initializationPhase, type, pageSize, pageCursor }?: GetContractTemplatesFilter): Promise<Web3PagedResponse<LeanContractTemplateDto>>;
    /**
     * Upload a new contract. This contract would be private and only your tenant can see it
     * @param payload
     *
     * @returns {ContractTemplateDto}
     */
    uploadContractTemplate(payload: ContractUploadRequest): Promise<ContractTemplateDto>;
    /**
     * Get contract template by id
     * @param templateId
     *
     * @returns {ContractTemplateDto}
     */
    getContractTemplate(templateId: string): Promise<ContractTemplateDto>;
    /**
     * Delete a contract template by id
     * @param templateId
     */
    deleteContractTemplate(templateId: string): Promise<void>;
    /**
     * Get contract template deploy function by id
     * @param templateId
     * @param withDocs
     *
     * @returns {AbiFunction}
     */
    getContractTemplateDeployFunction(templateId: string, withDocs?: boolean): Promise<AbiFunction>;
    /**
     * Deploy a new contract by contract template id
     * @param templateId
     *
     * @returns {ContractDeployResponse}
     */
    deployContract(templateId: string, payload: ContractDeployRequest): Promise<ContractDeployResponse>;
    /**
     * Get supported blockchains by template id
     * @param templateId
     *
     * @returns {SupportedBlockchainsResponse}
     */
    getSupportedBlockchains(templateId: string): Promise<SupportedBlockchainsResponse>;
    /**
     * Get all contracts by blockchain and template
     * @param blockchainId
     * @param contractTemplateId
     *
     * @returns {LeanDeployedContractResponseDto[]}
     */
    getContractsByFilter({ contractTemplateId, baseAssetId, contractAddress, pageSize, pageCursor }?: GetContractsFilter): Promise<Web3PagedResponse<LeanDeployedContractResponseDto>>;
    /**
     * Get contract ABI function by contractId
     * @param contractId
     * @param functionSignature
     *
     * @returns {AbiFunction}
     */
    getContractAbiFunction(contractId: string, functionSignature: string): Promise<AbiFunction>;
    /**
     * Get contract's address by blockchain base assetId and the transaction hash
     * @param baseAssetId
     * @param txHash
     *
     * @returns {ContractAddressResponseDto}
     */
    getContractAddress(baseAssetId: string, txHash: string): Promise<ContractAddressResponseDto>;
    /**
     * Get contract by blockchain base assetId and contract address
     * @param baseAssetId
     * @param templateId
     *
     * @returns {DeployedContractResponseDto}
     */
    getContractByAddress(baseAssetId: string, contractAddress: string): Promise<DeployedContractResponseDto>;
    /**
     * Get contract's ABI by blockchain base assetId and contract address
     * @param baseAssetId
     * @param contractAddress
     *
     * @returns {ContractAbiResponseDto}
     */
    getContractAbi(baseAssetId: string, contractAddress: string): Promise<ContractAbiResponseDto>;
    /**
     * Fetch the ABI. If not found fetch the ABI from the block explorer
     * @param baseAssetId
     * @param contractAddress
     *
     * @returns {ContractWithABIDto}
     */
    fetchOrScrapeABI(baseAssetId: string, contractAddress: string): Promise<ContractWithABIDto>;
    /**
     * Save contract ABI for the tenant
     * @param baseAssetId
     * @param contractAddress
     * @param abi
     * @param name
     *
     * @returns {ContractWithABIDto}
     */
    saveABI(baseAssetId: string, contractAddress: string, abi: AbiFunction[], name?: string): Promise<ContractWithABIDto>;
    /**
     * Get transaction receipt by blockchain base assetId and transaction hash
     * @param baseAssetId
     * @param txHash
     *
     * @returns TransactionReceiptResponseDto
     */
    getTransactionReceipt(baseAssetId: string, txHash: string): Promise<TransactionReceiptResponseDto>;
    /**
     * Call contract read function by blockchain base assetId and contract address
     * @param baseAssetId
     * @param templateId
     *
     * @returns ParameterWithValueList
     */
    readContractCallFunction(baseAssetId: string, contractAddress: string, payload: ReadCallFunctionDto): Promise<ParameterWithValueList>;
    /**
     * Call contract write function by blockchain base assetId and contract address
     * @param baseAssetId
     * @param templateId
     *
     * @returns WriteCallFunctionResponseDto
     */
    writeContractCallFunction(baseAssetId: string, contractAddress: string, payload: WriteCallFunctionDto): Promise<WriteCallFunctionResponseDto>;
    /**
     * Creates a new asset and links it as a token.
     *
     * @param {IssueTokenRequest} payload - The payload containing information for token issuance.
     *
     * @returns {TokenLink} Response with created token ID
     */
    issueNewToken(payload: IssueTokenRequest): Promise<TokenLink>;
    /**
     * Retrieves all linked tokens in a paginated format.
     *
     * @param {Object} payload
     * @param {TokenLinkStatus} payload.status - The status of linked tokens (COMPLETED / PENDING). Default is COMPLETED
     * @param {number} payload.pageSize - The number of results to return on the next page
     * @param {string} payload.pageCursor - The cursor for the next page
     *
     * @returns {TokenLink[]} A paginated array of linked tokens
     */
    getLinkedTokens({ status, pageSize, pageCursor }?: GetTokenLinksFilter): Promise<Web3PagedResponse<TokenLink>>;
    /**
     * Get the total count of linked tokens
     * @returns TokenLinksCount
     */
    getLinkedTokensCount(): Promise<TokenLinksCount>;
    /**
     * Link a token by refId to the tenant
     * @param type
     * @param refId
     * @param displayName
     *
     * @returns TokenLink
     */
    linkToken(type: SupportedContractTemplateType, refId: string, displayName?: string): Promise<TokenLink>;
    /**
     * Link a token by baseAssetId and contract address to the tenant
     * @param type
     * @param baseAssetId
     * @param contractAddress
     * @param displayName
     *
     * @returns TokenLink
     */
    linkContractByAddress(type: SupportedContractTemplateType, baseAssetId: string, contractAddress: string, displayName?: string): Promise<TokenLink>;
    /**
     * Get a linked token
     * @param id
     *
     * @returns TokenLink
     */
    getLinkedToken(id: string): Promise<TokenLink>;
    /**
     * Delete a token link
     * @param id
     */
    unlinkToken(id: string): Promise<void>;
    /**
     * Retrieves all pending linked tokens in a paginated format
     *
     * @param {Object} payload - The payload for retrieving pending linked tokens
     * @param {number} payload.pageSize - The number of results to return on the next page
     * @param {string} payload.pageCursor - The cursor for the next page
     *
     * @returns {TokenLink[]} A paginated array of pending linked tokens
     */
    getPendingLinkedTokens({ pageSize, pageCursor }?: GetTokenLinksFilter): Promise<Web3PagedResponse<TokenLink>>;
    /**
     * Creates a new collection and links it
     *
     * @param {CreateCollectionRequest} payload - The payload containing information for collection creation
     *
     * @returns {CollectionLink} Response with created collection link ID
     */
    createNewCollection(payload: CreateCollectionRequest): Promise<CollectionLink>;
    /**
     * Retrieves all linked collections in a paginated format.
     *
     * @param {Object} payload
     * @param {TokenLinkStatus} payload.status - The status of linked collections (COMPLETED / PENDING). Default is COMPLETED
     * @param {number} payload.pageSize - The number of results to return on the next page
     * @param {string} payload.pageCursor - The cursor for the next page
     *
     * @returns {CollectionLink[]} A paginated array of linked collections
     */
    getLinkedCollections({ status, pageSize, pageCursor }?: GetTokenLinksFilter): Promise<Web3PagedResponse<CollectionLink>>;
    /**
     * Get a linked collection
     *
     * @returns CollectionLink
     */
    getLinkedCollection(id: string): Promise<CollectionLink>;
    /**
     * Unlink a collection
     */
    unlinkCollection(id: string): Promise<void>;
    /**
     * Mint collection NFT
     *
     * @returns WriteCallFunctionResponseDto
     */
    mintNFT(collectionId: string, payload: MintCollectionTokenRequest): Promise<WriteCallFunctionResponseDto>;
    /**
     * Burn collection NFT
     *
     * @returns WriteCallFunctionResponseDto
     */
    burnNFT(collectionId: string, payload: BurnCollectionTokenRequest): Promise<WriteCallFunctionResponseDto>;
    /**
     * Get collection token details
     *
     * @returns CollectionTokenResponseDto
     */
    getLinkedCollectionTokenDetails(collectionId: string, tokenId: string): Promise<CollectionTokenResponseDto>;
    /**
     * Validate VASP details for travel rule compliance
     * @param travelRuleMessageVaspInfo
     */
    validateTravelRuleTransaction(travelRuleMessageVaspInfo: ValidateTravelRuleVaspInfo): Promise<ValidateTravelRuleResult>;
    /**
     * Validate Travel Rule transaction and PII data
     * @param travelRuleMessage
     */
    validateFullTravelRuleTransaction(travelRuleMessage: ValidateCreateTravelRuleTransaction): Promise<ValidateFullTravelRuleResult>;
    /**
     * Get VASP details for travel rule compliance
     * @param did
     */
    getTravelRuleVASPDetails(did: string): Promise<TravelRuleVasp>;
    /**
     * Get VASP library for travel rule compliance
     */
    getAllTravelRuleVASPs(filter?: TravelRuleVaspFilter): Promise<TravelRuleVasp[]>;
    /**
     * Update VASP for travel rule compliance
     */
    updateVasp(vaspInfo: TravelRuleVasp): Promise<TravelRuleVasp>;
    /**
     * Get assigned VASP Did for a specific vault. Returns empty string vaspDid value in response if none assigned.
     */
    getVaspForVault(vaultAccountId: number): Promise<TravelRuleVaspForVaultRequestResponse>;
    /**
     * Sets the VASP Did for a specific vault. Pass empty string to remove existing one.
     */
    setVaspForVault(vaultAccountId: number, vaspDid: string): Promise<TravelRuleVaspForVaultRequestResponse>;
    /**
     * Get PostScreening Policies for compliance
     * @param screeningType The type of screening (e.g., 'travel_rule', 'aml')
     */
    getPostScreeningPolicy(screeningType: ScreeningType): Promise<ScreeningProviderConfigurationResponse>;
    /**
     * Get Screening Policies for compliance
     * @param screeningType The type of screening (e.g., 'travel_rule', 'aml')
     */
    getScreeningPolicy(screeningType: ScreeningType): Promise<ScreeningPolicyRuleResponse>;
    /**
     * Get Screening Configuration for compliance
     * @param screeningType The type of screening (e.g., 'travel_rule', 'aml')
     */
    getScreeningConfiguration(screeningType: ScreeningType): Promise<ScreeningConfigurationsResponse>;
    /**
     * Update Bypass Screening Configuration for compliance
     * @param screeningType The type of screening (e.g., 'travel_rule', 'aml')
     * @param screeningPolicyConfiguration The configuration to update
     */
    updatePolicyConfiguration(screeningType: ScreeningType, screeningPolicyConfiguration: ScreeningPolicyConfiguration): Promise<ScreeningConfigurationsResponse>;
    /**
     * Update Bypass Screening Tenant Configuration for AML/KYT compliance
     * @param screeningTenantConfiguration
     */
    updateTenantScreeningConfiguration(screeningTenantConfiguration: ScreeningTenantConfiguration): Promise<ScreeningTenantConfiguration>;
    /**
     * Get supported assets for screening per provider
     * @param provider The provider to get supported assets for
     */
    getSupportedAssetsForScreening(provider: ScreeningSupportedProviders): Promise<ScreeningSupportedAssetResponse>;
    /**
     * Creates Smart Transfers ticket
     * @param data
     * @param requestOptions
     */
    createSmartTransferTicket(data: SmartTransfersTicketCreatePayload, requestOptions?: RequestOptions): Promise<SmartTransfersTicketResponse>;
    /**
     * Get Smart Transfer tickets
     * @param filters
     */
    getSmartTransferTickets(filters: SmartTransfersTicketsFilters): Promise<SmartTransfersTicketsResponse>;
    /**
     * Get Smart Transfers ticket by id
     * @param ticketId
     */
    getSmartTransferTicket(ticketId: string): Promise<SmartTransfersTicketResponse>;
    /**
     * Set Smart Transfers ticket expires in
     * @param ticketId
     * @param expiresIn
     */
    setSmartTransferTicketExpiresIn(ticketId: string, expiresIn: number): Promise<SmartTransfersTicketResponse>;
    /**
     * Set Smart Transfer ticket external id
     * @param ticketId
     * @param externalRefId
     */
    setSmartTransferTicketExternalId(ticketId: string, externalRefId: string): Promise<SmartTransfersTicketResponse>;
    /**
     * Submit Smart Transfers ticket
     * @param ticketId
     * @param expiresIn
     */
    submitSmartTransferTicket(ticketId: string, expiresIn: number): Promise<SmartTransfersTicketResponse>;
    /**
     * Fulfill Smart Transfers ticket
     * @param ticketId
     */
    fulfillSmartTransferTicket(ticketId: string): Promise<SmartTransfersTicketResponse>;
    /**
     * Cancel Smart Transfers ticket
     * @param ticketId
     */
    cancelSmartTransferTicket(ticketId: string): Promise<SmartTransfersTicketResponse>;
    /**
     * Create Smart Transfers ticket term
     * @param ticketId
     * @param data
     */
    createSmartTransferTicketTerm(ticketId: string, data: SmartTransfersTicketTermPayload): Promise<SmartTransfersTicketTermResponse>;
    /**
     * Fet Smart Transfers ticket term
     * @param ticketId
     * @param termId
     */
    getSmartTransferTicketTerms(ticketId: string, termId: string): Promise<SmartTransfersTicketTermResponse>;
    /**
     * Update Smart Transfers ticket term
     * @param ticketId
     * @param termId
     * @param data
     */
    updateSmartTransferTicketTerms(ticketId: string, termId: string, data: SmartTransfersTicketTermPayload): Promise<SmartTransfersTicketTermResponse>;
    /**
     * Fund Smart Transfers ticket term
     * @param ticketId
     * @param termId
     * @param data
     */
    fundSmartTransferTicketTerm(ticketId: string, termId: string, data: SmartTransfersTicketTermFundPayload): Promise<SmartTransfersTicketTermResponse>;
    /**
     * Manually fund Smart Transfers ticket term
     * @param ticketId
     * @param termId
     * @param txHash
     */
    manuallyFundSmartTransferTicketTerms(ticketId: string, termId: string, txHash: string): Promise<SmartTransfersTicketTermResponse>;
    /**
     * Set Smart Transfers user group ids. User group ids are used for Smart Transfer notifications
     * @param userGroupIds
     */
    setSmartTransferTicketUserGroups(userGroupIds: string[]): Promise<SmartTransfersUserGroupsResponse>;
    /**
     * Get Smart Transfers user group ids. User group ids are used for Smart Transfer notifications
     */
    getSmartTransferTicketUserGroups(): Promise<SmartTransfersUserGroupsResponse>;
    /**
     * Delete Smart Transfers ticket term
     * @param ticketId
     * @param termId
     */
    deleteSmartTransferTicketTerms(ticketId: string, termId: string): Promise<void>;
    /**
     * Get active policy (TAP) [BETA]
     */
    getActivePolicy(): Promise<TAP.PolicyAndValidationResponse>;
    /**
     * Get draft policy (TAP) [BETA]
     */
    getDraft(): Promise<TAP.DraftReviewAndValidationResponse>;
    /**
     * Update draft policy (TAP) [BETA]
     * @param rules
     */
    updateDraft(rules: TAP.PolicyRule[]): Promise<TAP.DraftReviewAndValidationResponse>;
    /**
     * Publish draft policy (TAP) [BETA]
     * @param draftId
     */
    publishDraft(draftId: string): Promise<TAP.PublishResult>;
    /**
     * Publish rules (TAP) [BETA]
     * @param rules
     */
    publishPolicyRules(rules: TAP.PolicyRule[]): Promise<TAP.PublishResult>;
    private getCommaSeparatedList;
    /**
     * Get list of jobs for current tenant
     * @param fromTime beggining of time range in Unix Epoch
     * @param toTime ending of time range in Unix Epoch
     */
    getJobsForTenant(fromTime: number, toTime: number): Promise<BatchJob[]>;
    /**
     * Get job info by job ID
     * @param jobId
     */
    getJobById(jobId: string): Promise<BatchJob>;
    /**
     * Get tasks belonging to given job
     * @param jobId
     */
    getTasksByJobId(jobId: string): Promise<BatchTask>;
    /**
     * Cancel a job by ID
     * @param jobId
     */
    cancelJob(jobId: string): Promise<void>;
    /**
     * Pause a job by ID
     * @param jobId
     */
    pauseJob(jobId: string): Promise<void>;
    /**
     * Continue a job by ID
     * @param jobId
     */
    continueJob(jobId: string): Promise<void>;
    /**
     * Create multiple vault accounts in one bulk operation
     * @param count number of vault accounts
     * @param assetId optional asset id to create in each new account
     * @param requestOptions
     */
    createVaultAccountsBulk(count: number, assetId: string, requestOptions?: RequestOptions): Promise<JobCreatedResponse>;
    /**
     * Creates a new asset within a list of existing vault accounts
     * @param assetId The asset to add
     * @param vaultAccountIdFrom The first of the account ID range
     * @param vaultAccountIdTo The last of the account ID range
     * @param requestOptions
     */
    createVaultAssetsBulk(assetId: string, vaultAccountIdFrom: string, vaultAccountIdTo: string, requestOptions?: RequestOptions): Promise<JobCreatedResponse>;
    /**
     * Rescan transactions base on assetId and txHash
     * @param rescanTxs An array of RescanTx
     */
    rescanTransactionsBeta(rescanTxs: RescanTx[]): Promise<RescanTxResponse[]>;
}
